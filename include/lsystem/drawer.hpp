//
// Created by one_eyed_john on 18/05/23.
//

#ifndef L_SYSTEMS_DRAWER_HPP
#define L_SYSTEMS_DRAWER_HPP

#include <lsystem/renderer.hpp>
#include <lsystem/lsystem.hpp>

#include <glad/glad.h>
#include <GLFW/glfw3.h>

#include <stack>

/**
 * \brief A class for drawing LSystems,
 * includes out string of this LSystem;
 * so, the whole figure is the stack of nodes
 * \param lineLength The length of segment connecting two nodes
 * \param rotationAngle The angle of rotation (relative to the vertical)
 */
class Drawer {
public:
    /**
     * \brief Node is the position of Drawer on the plane,
     * it is characterized by coordinates (x_, y_) and the angle of rotation (relative to the vertical) - angle_
     */
    struct Node {
        float x_ = 0.f;
        float y_ = 0.f;
        float angle_ = 45.f;
    };

private:
    /// @brief String generated by LSystem
    std::string system_out_;

    /// @brief Stack of nodes
    std::stack<Node> nodes_stack = {};

    /// @brief Length of each segment
    unsigned int line_len_ = 5;

    /// @brief Angle of rotation (relative to the vertical)
    float rot_angle_ = 0;

    /// @brief Window resolution
    unsigned int width_ = 500;
    unsigned int height_ = 500;

    /**
     * \brief Emplace at nodes stack the first Node: its coordinates are resolution of the window, the angle is zero
     */
    void start();

    /**
     * \brief Change rotation angle of stack's top
     */
    void turn_right();

    /**
     * \brief Change rotation angle of stack's top
     */
    void turn_left();

    /**
     * \brief Operation with nodes stack, push stack's top
     */
    void push();

    /**
     * \brief Operation with nodes stack, pop the first element
     */
    void pop();

    /**
     * \brief Make a new Node, move on it and instructs Renderer to connect (draw!) it directly with the top one
     * \param render
     */
    void move(Renderer &render);

    /**
     * \brief Make a new Node and move on it, without any drawings by Renderer
     */
    void move_without_drawing();

public:
    /**
     * \param l_system_string The out string of LSystem
     * \param line_length The length of segment connecting two nodes; default is 5
     * \param rotation_angle The angle of rotation (relative to the vertical); default is 0
     * \param width The width of window; default is 500
     * \param height The height of window; default is 500
     */
    explicit Drawer(std::string  l_system_string, unsigned int line_length = 5, float rotation_angle = 0,
                    unsigned int width = 500, unsigned int height = 500);

    /**
     * \brief Processes the string and makes OpenGL work: draws a segment (line) between top and new nodes
     * \param render
     */
    void Draw(Renderer &render);

    /**
     * \brief Set up new length of the lines (default is 5)
     * \param line_length
     */
    void SetLineLength(unsigned int line_length);

    /**
     * \brief Set up new angle of the rotation (default is 90)
     * \param angle
     */
    void SetRotationAngle(float angle);
};

#endif //L_SYSTEMS_DRAWER_HPP
